mode:
  type: Standalone
  repository:
    type: JDBC
#    props:
#      path: demo

dataSources:
  ds_0:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://192.168.163.128:3306/demo_ds_0?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8&allowPublicKeyRetrieval=true
    username: root
    password: root
    maxPoolSize: 10
  ds_1:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://192.168.163.128:3306/demo_ds_1?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8&allowPublicKeyRetrieval=true
    username: root
    password: root
    maxPoolSize: 10
#  ds_2:
#    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
#    driverClassName: com.mysql.jdbc.Driver
#    jdbcUrl: jdbc:mysql://192.168.163.128:3306/demo_ds_2?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8&allowPublicKeyRetrieval=true
#    username: root
#    password: root
#    maxPoolSize: 10

rules:
- !SHARDING
    tables:
      t_order:
        actualDataNodes: ds_$->{0..1}.t_order_$->{0..1}
        databaseStrategy:
          standard:
            shardingColumn: order_id
            shardingAlgorithmName: custom-db-sharding
        tableStrategy:
          standard:
              shardingColumn: order_id
              shardingAlgorithmName: custom-table-sharding
#        keyGenerateStrategy:
#          column: order_id
#          keyGeneratorName: snowflake_generator
      t_order_item:
        actualDataNodes: ds_$->{0..1}.t_order_item_$->{0..1}
        databaseStrategy:
          standard:
              shardingColumn: order_id
              shardingAlgorithmName: custom-db-sharding
        tableStrategy:
          standard:
            shardingColumn: order_id
            shardingAlgorithmName: custom-table-sharding
#        keyGenerateStrategy:
#          column: order_item_id
#          keyGeneratorName: snowflake_generator
    bindingTables:
      - t_order,t_order_item

    shardingAlgorithms:
      custom-db-sharding:
        # 对应自定义算法的getType()返回值
        type: CUSTOM_DB_SHARDING
      custom-table-sharding:
        type: CUSTOM_TABLE_SHARDING
    
- !BROADCAST
    tables:
      - t_address


props:
  sql-show: true
